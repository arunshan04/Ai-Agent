import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';


const Sidebar = ({ tracks, sidebarOpen, setSidebarOpen }) => {
    const [isTracksOpen, setTracksOpen] = useState(false);

    // Pin state: true = pinned (sidebar always visible), false = unpinned (auto-hide)
    const [pinned, setPinned] = useState(true);
    const handleSidebarMouseLeave = () => { if (!pinned) setSidebarOpen(false); };
    const handleSidebarMouseEnter = () => { if (!sidebarOpen) setSidebarOpen(true); };
    const handleNavClick = () => { if (!pinned) setSidebarOpen(false); };

    return (
        <aside
            className={`sidebar${sidebarOpen ? ' open' : ' closed'}`}
            onMouseLeave={sidebarOpen ? handleSidebarMouseLeave : undefined}
            onMouseEnter={!sidebarOpen ? handleSidebarMouseEnter : undefined}
        >
            {sidebarOpen ? (
                <>
                    <button
                        className={`sidebar-pin-btn${pinned ? ' pinned' : ''}`}
                        onClick={() => {
                            if (pinned) {
                                setPinned(false);
                                setSidebarOpen(false);
                            } else {
                                setPinned(true);
                                setSidebarOpen(true);
                            }
                        }}
                        title={pinned ? 'Unpin Sidebar' : 'Pin Sidebar'}
                    >
                        {/* Pin icon, filled if pinned, outline if not */}
                        {pinned ? (
                            <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M7 2h8a1 1 0 0 1 1 1v2a1 1 0 0 0 1 1h1a1 1 0 0 1 0 2h-1v2.382a2 2 0 0 1-.586 1.414l-2.293 2.293V18a1 1 0 0 1-2 0v-5H9v5a1 1 0 0 1-2 0v-7.91l-2.293-2.293A2 2 0 0 1 4 9.382V7H3a1 1 0 1 1 0-2h1a1 1 0 0 0 1-1V3a1 1 0 0 1 1-1Zm1 2v2.382a2 2 0 0 0 .586 1.414L11 10.21l2.414-2.414A2 2 0 0 0 14 6.382V4H8Z" fill="#eebbc3"/>
                            </svg>
                        ) : (
                            <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M7 2h8a1 1 0 0 1 1 1v2a1 1 0 0 0 1 1h1a1 1 0 0 1 0 2h-1v2.382a2 2 0 0 1-.586 1.414l-2.293 2.293V18a1 1 0 0 1-2 0v-5H9v5a1 1 0 0 1-2 0v-7.91l-2.293-2.293A2 2 0 0 1 4 9.382V7H3a1 1 0 1 1 0-2h1a1 1 0 0 0 1-1V3a1 1 0 0 1 1-1Zm1 2v2.382a2 2 0 0 0 .586 1.414L11 10.21l2.414-2.414A2 2 0 0 0 14 6.382V4H8Z" stroke="#eebbc3" strokeWidth="1.5" fill="none"/>
                            </svg>
                        )}
                    </button>
                    <h1>CVE Dashboard</h1>
                    <nav>
                        <NavLink to="/" end onClick={handleNavClick}>Dashboard</NavLink>
                        <button onClick={() => setTracksOpen(!isTracksOpen)} className="track-toggle">
                            Tracks {isTracksOpen ? '▲' : '▼'}
                        </button>
                        {isTracksOpen && (
                            <div className="track-list">
                                {tracks.map(track => (
                                    <NavLink key={track.id} to={`/tracks/${track.name}`} onClick={handleNavClick}>
                                        {track.name}
                                    </NavLink>
                                ))}
                            </div>
                        )}
                        <NavLink to="/vulnerabilities" onClick={handleNavClick}>Vulnerabilities</NavLink>
                        <NavLink to="/chatboard" onClick={handleNavClick}>ChatBoard</NavLink>
                    </nav>
                </>
            ) : (
                // Hotspot for hover to open sidebar
                <div className="sidebar-hotspot" title="Show Menu"></div>
            )}
        </aside>
    );
};

export default Sidebar;