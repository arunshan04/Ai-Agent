import React from 'react';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import CVESummaryCharts from './CVESummaryCharts'; // Adjust the import path as necessary

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#b00', '#8884d8'];

const Stats = ({ tracks, hosts, vulnerabilities }) => {
  // Count OS types
  const osCounts = hosts ? hosts.reduce((acc, h) => {
    const os = h.os_type || 'Unknown';
    acc[os] = (acc[os] || 0) + 1;
    return acc;
  }, {}) : {};

  // Count vulnerabilities by severity
  const severityCounts = vulnerabilities ? vulnerabilities.reduce((acc, v) => {
    const sev = v.severity || 'Unknown';
    acc[sev] = (acc[sev] || 0) + 1;
    return acc;
  }, {}) : {};

  // Prepare data for charts
  const osData = Object.entries(osCounts).map(([os, count]) => ({ name: os, value: count }));
  const severityData = Object.entries(severityCounts).map(([sev, count]) => ({ name: sev, value: count }));

  // Sort vulnerabilities by updated_ts (descending) and get the 5 most recent
  const recentVulns = vulnerabilities && vulnerabilities.length > 0
    ? [...vulnerabilities].sort((a, b) => new Date(b.updated_ts) - new Date(a.updated_ts)).slice(0, 5)
    : [];

  return (
    <div>
      <h2>Dashboard Overview</h2>
      <h3>Key Metrics</h3>
      <div style={{ display: 'flex', gap: '2rem' }}>
        <div>
          <strong>Total Tracks:</strong> {tracks ? tracks.length : 0}
        </div>
        <div>
          <strong>Total Hosts:</strong> {hosts ? hosts.length : 0}
        </div>
        <div>
          <strong>Total Vulnerabilities:</strong> {vulnerabilities ? vulnerabilities.length : 0}
        </div>
      </div>
      <hr />
      {/* Charts in a single row */}
      <div style={{ display: 'flex', gap: '2rem', justifyContent: 'center', alignItems: 'flex-start', marginBottom: 32 }}>
        {/* Hosts by OS Pie Chart */}
        <div style={{ flex: 1, minWidth: 320 }}>
          <h3 style={{ textAlign: 'center' }}>Hosts by Operating System</h3>
          <ResponsiveContainer width="100%" height={250}>
            <PieChart>
              <Pie data={osData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80} label>
                {osData.map((entry, index) => (
                  <Cell key={`cell-os-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
        {/* Vulnerabilities by Severity Bar Chart */}
        <div style={{ flex: 1, minWidth: 320 }}>
          <h3 style={{ textAlign: 'center' }}>Vulnerabilities by Severity</h3>
          <ResponsiveContainer width="100%" height={250}>
            <BarChart data={severityData} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>
              <XAxis dataKey="name" />
              <YAxis allowDecimals={false} />
              <Tooltip />
              <Legend />
              <Bar dataKey="value" fill="#b00">
                {severityData.map((entry, index) => (
                  <Cell key={`cell-sev-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
      <hr />
      {/* CVE Summary Charts Row */}
      <CVESummaryCharts />
      {/* End CVE Summary Charts Row */}
      <hr />
      {vulnerabilities && vulnerabilities.length > 0 && (
        <div>
          <h3 style={{ marginTop: 24 }}>Recent Vulnerabilities</h3>
          <ul>
            {recentVulns.map(vuln => (
              <li key={vuln.cve_id} style={{ marginBottom: 8 }}>
                <strong>{vuln.cve_id}</strong>: {vuln.cve_title || 'No Title'}
                {vuln.severity && (
                  <span style={{ marginLeft: 8, color: '#b00' }}>[{vuln.severity}]</span>
                )}
                {vuln.updated_ts && (
                  <span style={{ marginLeft: 8, color: '#888' }}>({new Date(vuln.updated_ts).toLocaleString()})</span>
                )}
              </li>
            ))}
          </ul>
        </div>
      )}
      <hr />
    </div>
  );
};

export default Stats;
