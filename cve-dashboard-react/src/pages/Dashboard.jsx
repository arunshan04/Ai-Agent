import React, { useState, useEffect } from 'react';
import { getTracks, getHosts } from '../api/cveService';

const Dashboard = () => {
    const [stats, setStats] = useState({ tracks: [], hosts: [] });
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const [tracksData, hostsData] = await Promise.all([getTracks(), getHosts()]);
                const uniqueTracks = Array.from(new Map(tracksData.map(item => [item['name'], item])).values());
                setStats({ tracks: uniqueTracks, hosts: hostsData });
            } catch (err) {
                setError('Failed to fetch dashboard data.');
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    if (loading) return <div>Loading...</div>;
    if (error) return <div className="error-message">{error}</div>;

    const osCounts = stats.hosts.reduce((acc, host) => {
        acc[host.os_type] = (acc[host.os_type] || 0) + 1;
        return acc;
    }, {});

    return (
        <div>
            <h2>Dashboard Overview</h2>
            <div className="stat-cards-container">
                <div className="stat-card"><h3>Total Tracks</h3><p>{stats.tracks.length}</p></div>
                <div className="stat-card"><h3>Total Hosts</h3><p>{stats.hosts.length}</p></div>
            </div>

            <h3>Hosts by Operating System</h3>
            <div className="stat-cards-container">
                {Object.entries(osCounts).map(([os, count]) => (
                    <div key={os} className="stat-card"><h3>{os}</h3><p>{count}</p></div>
                ))}
            </div>

            <h3>Tracks Overview</h3>
            {stats.tracks.map(track => {
                const hostsInTrack = stats.hosts.filter(h => h.track === track.id);
                return (
                    <details key={track.id} className="track-expander">
                        <summary>{track.name} &mdash; {hostsInTrack.length} hosts</summary>
                        <p><em>{track.description || 'No description provided.'}</em></p>
                        <ul>
                            {hostsInTrack.length > 0 ?
                                hostsInTrack.map(host => <li key={host.id}>{host.name} ({host.os_type})</li>) :
                                <li>No hosts are currently assigned to this track.</li>
                            }
                        </ul>
                    </details>
                );
            })}
        </div>
    );
};

export default Dashboard;