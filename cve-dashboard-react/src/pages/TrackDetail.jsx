import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

const TrackDetail = () => {
    const { trackName } = useParams();
    const [results, setResults] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            setError(null);
            try {
                // 1. Fetch all tracks to find the ID for the given name.
                // In a larger app, this list might come from a global state/context.
                const tracksRes = await axios.get('/api/tracks/');
                const tracks = tracksRes.data;
                const trackObj = tracks.find(t => t.name === trackName);

                if (!trackObj) {
                    setError(`Track "${trackName}" not found.`);
                    setResults([]);
                    setLoading(false);
                    return;
                }

                // 2. Fetch the detailed vulnerability data for the track ID.
                const detailRes = await axios.get(`/api/track-detail/${trackObj.id}/`);
                setResults(detailRes.data);
            } catch (err) {
                setError(`Could not fetch data for track: ${trackName}.`);
            }
            setLoading(false);
        };

        fetchData();
    }, [trackName]); // Rerun when trackName from URL changes

    if (loading) return <div>Loading track details...</div>;
    if (error) return <div className="error-message" style={{ color: 'red' }}>{error}</div>;

    return (
        <div>
            <h3>Hosts and Package Vulnerabilities for Track: {trackName}</h3>
            {results.length > 0 ? results.map((row) => (
                // Using a composite key for stability, assuming the combination is unique.
                <div key={`${row.host_id}-${row.cve_id}-${row.package_name}`} className="host-vuln-card">
                    <b>Host:</b> {row.host_name} ({row.os_type})<br />
                    <b>Package:</b> {row.package_name}<br />
                    <b>CVE ID:</b> {row.cve_id || <span className='none'>None</span>}<br />
                    <b>Title:</b> {row.cve_title || <span className='none'>None</span>}<br />
                    <b>Description:</b> {row.cve_description || <span className='none'>None</span>}<br />
                    <b>Score:</b> <span className='vuln-score'>{row.score || '-'}</span><br />
                    <b>Impact:</b> <span className='vuln-impact'>{row.impact || '-'}</span><br />
                    <b>Status:</b> {row.status || '-'}<br />
                    <b>Other:</b> {row.other_fields || '-'}
                </div>
            )) : <p>No hosts/packages/vulnerabilities found for this track.</p>}
        </div>
    );
};

export default TrackDetail;