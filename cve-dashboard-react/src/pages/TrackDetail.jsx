import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getTrackAnalysis } from '../api/cveService';

function getStatusColor(status) {
  if (!status) return '#888';
  const s = status.toLowerCase();
  if (s.includes('fixed')) return '#388e3c';
  if (s.includes('open')) return '#b00';
  if (s.includes('in progress')) return '#fbc02d';
  if (s.includes('critical')) return '#b00';
  if (s.includes('high')) return '#f57c00';
  if (s.includes('medium')) return '#fbc02d';
  if (s.includes('low')) return '#388e3c';
  return '#1976d2';
}

function getScoreColor(score) {
  if (score === null || score === undefined || score === '') return '#888';
  const s = parseFloat(score);
  if (s >= 9) return '#b00'; // Critical
  if (s >= 7) return '#f57c00'; // High
  if (s >= 4) return '#fbc02d'; // Medium
  if (s > 0) return '#388e3c'; // Low
  return '#888';
}

const TITLE_STYLE = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'space-between',
  padding: '10px 16px',
  borderBottom: '1px solid #eee',
  cursor: 'pointer',
  gap: 0,
};
const COL_STYLE = width => ({ minWidth: width, maxWidth: width, flex: `0 0 ${width}px`, overflow: 'visible', textOverflow: 'unset', whiteSpace: 'normal' });

const FIELD_LIST = [
  { key: 'cve_description', label: 'Description' },
  { key: 'thinking_text', label: 'LLM Thinking', alt: 'thought' },
  { key: 'reasoning', label: 'Reasoning' },
  { key: 'impact', label: 'Impact' },
];

const TrackDetail = () => {
  const { trackName } = useParams();
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  // openField: { idx: number, field: string } | null
  const [openField, setOpenField] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const data = await getTrackAnalysis(trackName);
        setResults(data.filter(row => !row.status || row.status.toLowerCase() !== 'nonvulnerable'));
      } catch (err) {
        setError(`Could not fetch data for track: ${trackName}.`);
      }
      setLoading(false);
    };
    fetchData();
  }, [trackName]);

  if (loading) return <div>Loading track details...</div>;
  if (error) return <div className="error-message" style={{ color: 'red' }}>{error}</div>;

  return (
    <div>
      <h3>CVEs and Analysis for Track: {trackName}</h3>
      {results.length === 0 && <div>No data found for this track.</div>}
      <div>
        {results.map((row, idx) => (
          <div key={idx} style={{ border: '1px solid #ddd', borderRadius: 8, margin: '1em 0', background: '#fafbfc' }}>
            {/* Title Card */}
            <div style={{ ...TITLE_STYLE, borderBottom: openField && openField.idx === idx ? '1px solid #eee' : 'none' }}>
              <span style={{ ...COL_STYLE('auto'), color: '#6c4fc1', fontWeight: 700, fontSize: 16 }}>
                {row.cve_id || '-'}
              </span>
              {/* Status: bold, colored, rectangle background */}
              <span style={{
                ...COL_STYLE('auto'),
                fontWeight: 700,
                color: '#fff',
                background: getStatusColor(row.status),
                borderRadius: 6,
                padding: '4px 16px',
                margin: '0 4px',
                display: 'inline-block',
                minWidth: 90,
                textAlign: 'center',
                boxShadow: '0 1px 3px rgba(0,0,0,0.04)'
              }}>
                {row.status || '-'}
              </span>
              <span style={{ ...COL_STYLE('auto'), color: '#222' }}>{row.package || '-'}</span>
              {/* Score: bold, colored, circle background */}
              <span style={{
                ...COL_STYLE('auto'),
                fontWeight: 700,
                color: '#fff',
                background: getScoreColor(row.cvss_score || row.score),
                borderRadius: '50%',
                width: 36,
                height: 36,
                minWidth: 36,
                minHeight: 36,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: 16,
                margin: '0 4px',
                boxShadow: '0 1px 3px rgba(0,0,0,0.04)'
              }}>
                {row.cvss_score || row.score || 'N/A'}
              </span>
              {/* Severity: bold, colored, rectangle background for MEDIUM, UNKNOWN, etc. */}
              <span style={{
                ...COL_STYLE('auto'),
                fontWeight: 700,
                color: '#fff',
                background: (row.Severity || row.severity || '').toLowerCase() === 'medium' ? '#fbc02d' :
                            (row.Severity || row.severity || '').toLowerCase() === 'unknown' ? '#888' :
                            (row.Severity || row.severity || '').toLowerCase() === 'high' ? '#f57c00' :
                            (row.Severity || row.severity || '').toLowerCase() === 'critical' ? '#b00' :
                            (row.Severity || row.severity || '').toLowerCase() === 'low' ? '#388e3c' : '#1976d2',
                borderRadius: 6,
                padding: '4px 16px',
                margin: '0 4px',
                display: 'inline-block',
                minWidth: 90,
                textAlign: 'center',
                boxShadow: '0 1px 3px rgba(0,0,0,0.04)'
              }}>
                {row.Severity || row.severity || '-'}
              </span>
              {/* Field buttons */}
              <div style={{ display: 'flex', gap: 8, marginLeft: 16 }}>
                {FIELD_LIST.map(field => (
                  <button
                    key={field.key}
                    style={{
                      background: openField && openField.idx === idx && openField.field === field.key ? '#e0e7ff' : '#f5f5f5',
                      border: '1px solid #ccc',
                      borderRadius: 4,
                      padding: '4px 10px',
                      fontWeight: 600,
                      cursor: 'pointer',
                      color: '#333',
                    }}
                    onClick={e => {
                      e.stopPropagation();
                      setOpenField(openField && openField.idx === idx && openField.field === field.key ? null : { idx, field: field.key });
                    }}
                  >
                    {field.label}
                  </button>
                ))}
              </div>
              <span style={{ ...COL_STYLE('auto'), color: '#888', fontSize: 13, textAlign: 'right', marginLeft: 16 }}>
                {row.updated_ts ? new Date(row.updated_ts).toLocaleString() : '-'}
              </span>
            </div>
            {/* Accordion Field Value */}
            {openField && openField.idx === idx && (
              <div style={{ padding: '16px 24px 16px 24px', background: '#fff' }}>
                <div style={{ marginBottom: 12 }}>
                  <b>{FIELD_LIST.find(f => f.key === openField.field)?.label}</b>
                  <div style={{ margin: '6px 0 0 0', color: '#333', fontSize: 15, whiteSpace: 'pre-line' }}>
                    {/* Support alt key for LLM Thinking */}
                    {(() => {
                      const field = FIELD_LIST.find(f => f.key === openField.field);
                      if (!field) return '-';
                      let value = field.alt ? row[field.key] || row[field.alt] : row[field.key];
                      if (!value) return '-';
                      // Replace literal '\n' with real newlines
                      return typeof value === 'string' ? value.replace(/\\n/g, '\n') : value;
                    })()}
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default TrackDetail;